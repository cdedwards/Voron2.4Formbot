#maxtemp = 35,0; //35 deg C
#offset = 3; // Fan stops at maxtemp-offset if temp is falling.
#loop{
#if (acttemp < lasttemp){ // Temp is falling
#if (acttemp < (maxtemp-offset)){
#Stop_fan();
#}
#} else { // rising or same
#if (acttemp>=maxtemp) {
#Start_fan(100%);
#}
#}
#lasttemp = acttemp; // you should add some damping here like a value of a small ring buffer
#wait (1000); //wait 1 or â€¦5 seconds
#}


[duplicate_pin_override]
pins: CHAMBER_TEMPERATURE

[temperature_fan exhaust_filter]
pin: EXHAUST_FAN
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
min_temp:0
max_temp:80
#fan_speed: 1.0
sensor_pin: CHAMBER_TEMPERATURE
sensor_type: ATC Semitec 104NT-4-R025H42G
target_temp: 55
control: watermark

[delayed_gcode thermalFanToggle]
initial_duration: 10.
gcode:
  {% if printer['output_pin lock_EXHAUST'].value|int == 0 %}
    {% if printer['temperature_sensor chamber'].temperature > printer['gcode_macro _USER_VARIABLES'].chamber_temp %}
      SET_FAN_SPEED FAN=exhaust_filter SPEED=1
    {% else %}
      SET_FAN_SPEED FAN=exhaust_filter SPEED=0
    {% endif %}
  {% else %}
    {action_respond_info("Thermal Fan Locked")}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=thermalFanToggle DURATION=5.


#[delayed_gcode report_temp]
#initial_duration: 2.
#gcode:
#  {action_respond_info("Extruder Temp: %.1f" % (printer.extruder.temperature))}
#  UPDATE_DELAYED_GCODE ID=report_temp DURATION=2


## dummy output to get an switch in Mainsail
## any unused mcu pin can be defined you will not connect anything
## as I use the rPi as mcu I will use a pin from it
## Off -> M106 will update fan
## On -> M106 can not uodate fan
[output_pin lock_M106]
pin: rpi: gpio16
value:0
[output_pin lock_EXHAUST]
pin: rpi: gpio17
value:0

#####################################################################
#  Macros
#####################################################################
# M106 with lock and manual set feature
# M106 S128 M1 will update the fan in any case
[gcode_macro M106]
description: set fan with manual override and lock option
rename_existing: M106.1
gcode:
  {% if printer['output_pin lock_M106'].value|int == 0 or params.M|default(0) == '1' %}
    M106.1 {rawparams}
  {% else %}
    {action_respond_info("M106 update is locked")}
  {% endif %}


#  {% if 'S' in params %}
#  {% set seconds = params.S|float %|default(0) %}
#     SET_GCODE_VARIABLE MACRO=respond_chamber_timer VARIABLE=temperature VALUE={seconds}
#     UPDATE_DELAYED_GCODE ID=respond_chamber_timer DURATION={seconds}
#  {% endif %}

[gcode_macro M141]
description: Set temperature of chamber fan
gcode:
   {% set temp = params.S|default(0) %}
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=exhaust_filter TARGET={params.S|default(0)} min_speed=0.2 max_speed=0.6
    
##  Chamber Ventilation Control in Mainsail
[gcode_macro VENT]
description: Toggle Chamber fan
gcode:
    {% if printer['temperature_fan exhaust_filter'].target|float > 0 and 
          printer['temperature_fan exhaust_filter'].target|float <= printer['gcode_macro _USER_VARIABLES'].exhaust_vent_on_val|float %}
        M141
    {% else %}
        M141 S{printer['gcode_macro _USER_VARIABLES'].exhaust_vent_on_val}
    {% endif %}
    _VENT_INFO

[delayed_gcode _DELAY_VENT_OFF]
gcode:
  {% if printer.print_stats.state|lower != "paused" and printer.print_stats.state|lower != "printing" %}
    M141
    _VENT_INFO
  {% endif %}

[gcode_macro _VENT_INFO]
description: Helper: Print chamber fan temperature
gcode:
  {% if printer['temperature_fan exhaust_filter'].target|int == 0 %}
    {action_respond_info("Chamber fan off")}
  {% else %}
    {action_respond_info("Chamber fan target temp: %2dC" % (printer['temperature_fan exhaust_filter'].target))}
  {% endif %}
    
  
